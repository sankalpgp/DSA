#include <iostream>      // Include input/output stream for console operations 
#include <fstream>       // Include file stream for file read/write 
#include <cstring>       // Include C-string library for string operations like strcpy 
using namespace std;     // Use standard namespace to avoid prefixing std:: 
 
// Constants for max lengths and records 
const int MAX_NAME_LEN = 20;     // Maximum characters in student name 
const int MAX_ADDR_LEN = 30;     // Maximum characters in student address 
const int MAX_RECORDS = 100;     // Maximum number of student records 
 
// Define a structure for student 
struct Student { 
    int rollNo;                          // Unique identifier for student 
    char name[MAX_NAME_LEN];            // Student name (fixed size char array) 
    char address[MAX_ADDR_LEN];         // Student address (fixed size char array) 
    bool isDeleted;                     // Flag to indicate if record is logically deleted 
 
    // Default constructor 
    Student() { 
        rollNo = -1;                    // Initialize rollNo to -1 (means empty slot) 
        strcpy(name, "");               // Initialize name to empty string 
        strcpy(address, "");            // Initialize address to empty string 
        isDeleted = false;              // Mark as not deleted 
    } 
}; 
 
// Hash function to determine position in file based on roll number 
int getPosition(int rollNo) { 
    return rollNo % MAX_RECORDS;        // Return index using modulo operation 
} 
 
// Function to insert a student record into the file 
void insertRecord() { 
    fstream file("students.dat", ios::in | ios::out | ios::binary); // Open file in read/write binary mode 
 
    // If file does not exist, create and initialize it 
    if (!file) { 
        file.open("students.dat", ios::out | ios::binary); // Create file 
        Student s;                                         // Empty student object 
        for (int i = 0; i < MAX_RECORDS; ++i)              // Loop through all slots 
            file.write((char*)&s, sizeof(s));              // Write empty student to file 
        file.close();                                      // Close the file 
        file.open("students.dat", ios::in | ios::out | ios::binary); // Reopen in read/write mode 
    } 
 
    Student s;                         // New student object to insert 
    cout << "Enter Roll Number: "; 
    cin >> s.rollNo;                   // Input roll number 
    cin.ignore();                      // Clear newline character from buffer 
    cout << "Enter Name: "; 
    cin.getline(s.name, MAX_NAME_LEN); // Input name (can contain spaces) 
    cout << "Enter Address: "; 
    cin.getline(s.address, MAX_ADDR_LEN); // Input address 
    s.isDeleted = false;               // Mark as not deleted 
 
    int pos = getPosition(s.rollNo);   // Get file index based on roll number 
    file.seekg(pos * sizeof(Student)); // Move file pointer to the calculated position 
    Student temp; 
    file.read((char*)&temp, sizeof(Student)); // Read existing student record at that position 
 
    if (temp.rollNo != -1 && !temp.isDeleted) { 
        cout << "Record already exists at this position. Insertion failed.\n"; // Record already exists 
    } else { 
        file.seekp(pos * sizeof(Student));     // Move file pointer to position for writing 
        file.write((char*)&s, sizeof(Student)); // Write new student record 
        cout << "Record inserted successfully.\n"; 
    } 
 
    file.close(); // Close the file 
} 
 
// Function to delete a record by marking it deleted 
void deleteRecord() { 
    fstream file("students.dat", ios::in | ios::out | ios::binary); // Open file in read/write binary mode 
    if (!file) { 
        cout << "File not found.\n"; // Display error if file doesn't exist 
        return; 
    } 
 
    int rollNo; 
    cout << "Enter Roll Number to delete: "; 
    cin >> rollNo;                             // Input roll number to delete 
    int pos = getPosition(rollNo);             // Calculate position using hash 
    file.seekg(pos * sizeof(Student));         // Move to that position 
    Student s; 
    file.read((char*)&s, sizeof(Student));     // Read record at position 
 
    if (s.rollNo == rollNo && !s.isDeleted) {  // Check if record matches and is not already deleted 
        s.isDeleted = true;                    // Mark as deleted 
        file.seekp(pos * sizeof(Student));     // Move back to write position 
        file.write((char*)&s, sizeof(Student)); // Update record 
        cout << "Record deleted successfully.\n"; 
    } else { 
        cout << "Record not found.\n";         // Display if record doesn't match 
    } 
 
    file.close(); // Close the file 
} 
 
// Function to display a specific student record 
void displayRecord() { 
    ifstream file("students.dat", ios::binary); // Open file in binary read mode 
    if (!file) { 
        cout << "File not found.\n"; 
        cin.ignore(); 
        return; 
    } 
 
    int rollNo; 
    cout << "Enter Roll Number to display: "; 
    cin >> rollNo;                             // Input roll number to display 
 
    int pos = getPosition(rollNo);             // Calculate position 
    file.seekg(pos * sizeof(Student));         // Move to the position 
    Student s; 
    file.read((char*)&s, sizeof(Student));     // Read the record 
 
    if (s.rollNo == rollNo && !s.isDeleted) {  // If record matches and is not deleted 
        cout << "Roll No: " << s.rollNo << "\nName: " << s.name << "\nAddress: " << s.address << 
"\n"; 
    } else { 
        cout << "Record not found.\n";         // Record not found message 
    } 
 
    file.close(); // Close file 
} 
 
// Main function with menu 
int main() { 
    int choice; // Menu choice variable 
 
    do { 
        // Display menu options 
        cout << "\n--- Direct Access File System ---\n"; 
        cout << "1. Insert Record\n2. Delete Record\n3. Display Record\n4. Exit\nEnter choice: "; 
        cin >> choice; // Get user's choice 
 
        // Perform action based on user choice 
        switch (choice) { 
            case 1: insertRecord(); break; 
            case 2: deleteRecord(); break; 
            case 3: displayRecord(); break; 
            case 4: cout << "Exiting...\n"; break; 
            default: cout << "Invalid choice!\n"; break; 
        } 
 
    } while (choice != 4); // Repeat until user exits 
 
    return 0; // End of program 
} 
